msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-11-21 01:40+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Basic operators\n"
"---"
msgstr ""
"---\n"
"layout: getting-started\n"
"title: 基本演算子\n"
"---"

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"In the [previous chapter](/getting-started/basic-types.html), we saw Elixir pr"
"ovides `+`, `-`, `*`, `/` as arithmetic operators, plus the functions `div/2` "
"and `rem/2` for integer division and remainder."
msgstr ""
"[前章](/getting-started/basic-types.html)では、Elixir で使用できる算数の演算子 `+`, `-`, `*`, `"
"/` に加えて、除算の商と剰余を求める `div/2` と `rem/2` 関数を見てきました。"

msgid "Elixir also provides `++` and `--` to manipulate lists:"
msgstr "Elixir はリストを操作する為に `++` と `--` も使えるようになっています。"

msgid ""
"```iex\n"
"iex> [1, 2, 3] ++ [4, 5, 6]\n"
"[1, 2, 3, 4, 5, 6]\n"
"iex> [1, 2, 3] -- [2]\n"
"[1, 3]\n"
"```"
msgstr ""

msgid "String concatenation is done with `<>`:"
msgstr "文字列の連結には `<>` が使われます。"

msgid ""
"```iex\n"
"iex> \"foo\" <> \"bar\"\n"
"\"foobar\"\n"
"```"
msgstr ""

msgid ""
"Elixir also provides three boolean operators: `or`, `and` and `not`. These ope"
"rators are strict in the sense that they expect a boolean (`true` or `false`) "
"as their first argument:"
msgstr ""
"Elixir は `or`、 `and` 、 `not` など3つの論理演算子も用意しています。これらの演算子は第一引数として `true` か `fals"
"e` の論理値を期待しています。"

msgid ""
"```iex\n"
"iex> true and true\n"
"true\n"
"iex> false or is_atom(:example)\n"
"true\n"
"```"
msgstr ""

msgid "Providing a non-boolean will raise an exception:"
msgstr "第一引数に論理値以外を渡すと例外が発生します。"

msgid ""
"```iex\n"
"iex> 1 and true\n"
"** (BadBooleanError) expected a boolean on left-side of \"and\", got: 1\n"
"```"
msgstr ""

msgid ""
"`or` and `and` are short-circuit operators. They only execute the right side i"
"f the left side is not enough to determine the result:"
msgstr "`or` と `and` は短絡評価をする演算子です。左辺の結果を確かめるまでもないなら、右辺だけを返します。"

msgid ""
"```iex\n"
"iex> false and raise(\"This error will never be raised\")\n"
"false\n"
"iex> true or raise(\"This error will never be raised\")\n"
"true\n"
"```"
msgstr ""

msgid ""
"> Note: If you are an Erlang developer, `and` and `or` in Elixir actually map "
"to the `andalso` and `orelse` operators in Erlang."
msgstr ""
"Note: もしあなたが Erlang エンジニアなら、Elixir の `and` と `or` は Erlang における `andalso` と `o"
"relse` に対応させることでしょう。"

msgid ""
"Besides these boolean operators, Elixir also provides `||`, `&&` and `!` which"
" accept arguments of any type. For these operators, all values except `false` "
"and `nil` will evaluate to true:"
msgstr ""
"これら論理演算子とは対比して、如何なる型の引数でも受け取れる `||` や `&&` 、`!` もあります。これらの演算子は `false` と `nil`"
" を除く値のすべてを `true` として評価します。"

msgid ""
"```iex\n"
"# or\n"
"iex> 1 || true\n"
"1\n"
"iex> false || 11\n"
"11"
msgstr ""

msgid ""
"# and\n"
"iex> nil && 13\n"
"nil\n"
"iex> true && 17\n"
"17"
msgstr ""

msgid ""
"# !\n"
"iex> !true\n"
"false\n"
"iex> !1\n"
"false\n"
"iex> !nil\n"
"true\n"
"```"
msgstr ""

msgid ""
"As a rule of thumb, use `and`, `or` and `not` when you are expecting booleans."
" If any of the arguments are non-boolean, use `&&`, `||` and `!`."
msgstr ""
"大雑把な言い方をすると、論理値を用いる時に `and` や `or` 、 `not` を使い、もし引数のどれかが論理値でない時は `&&` や `||` 、"
" `!` を使うといいでしょう。"

msgid ""
"Elixir also provides `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<`, and `>` as com"
"parison operators:"
msgstr "比較演算子 `==` 、 `!=` 、 `===` 、 `!==` 、 `<=` 、 `>=` 、 `<` 、 `>` も用意されています。"

msgid ""
"```iex\n"
"iex> 1 == 1\n"
"true\n"
"iex> 1 != 2\n"
"true\n"
"iex> 1 < 2\n"
"true\n"
"```"
msgstr ""

msgid ""
"The difference between `==` and `===` is that the latter is more strict when c"
"omparing integers and floats:"
msgstr "`==` と `===` の違いは、整数と浮動小数点数を比べる際に後者の方がより厳格であることです。"

msgid ""
"```iex\n"
"iex> 1 == 1.0\n"
"true\n"
"iex> 1 === 1.0\n"
"false\n"
"```"
msgstr ""

msgid "In Elixir, we can compare two different data types:"
msgstr "Elixir では二つの異なる型を比較できます。"

msgid ""
"```iex\n"
"iex> 1 < :atom\n"
"true\n"
"```"
msgstr ""

msgid ""
"The reason we can compare different data types is pragmatism. Sorting algorith"
"ms don't need to worry about different data types in order to sort. The overal"
"l sorting order is defined below:"
msgstr "これはプラグマティズム(実用主義)が理由です。よって異なる型をソートする際に、その違いを心配する必要がないのです。"

msgid ""
"    number < atom < reference < function < port < pid < tuple < map < list < b"
"itstring"
msgstr ""

msgid ""
"You don't actually need to memorize this ordering, it's enough to know that th"
"is ordering exists."
msgstr "実際にこの順序を暗記する必要はなく、そういうものがあるという事だけを覚えていれば十分です。"

msgid ""
"For reference information about operators (and ordering), check the [reference"
" page on operators](https://hexdocs.pm/elixir/operators.html)."
msgstr "演算子とその整列順に関する情報は、[演算子について](https://hexdocs.pm/elixir/operators.html)を参照してください。"

msgid ""
"In the next chapter, we are going to discuss pattern matching through the use "
"of `=`, the match operator."
msgstr "次章では、マッチ演算子 `=` を用いたパターンマッチングを取り上げていきます。"
