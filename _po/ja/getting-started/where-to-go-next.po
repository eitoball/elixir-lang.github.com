msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-08-11 01:00+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Where to go next\n"
"---"
msgstr ""
"---\n"
"layout: getting-started\n"
"title: 次にどこへ行こう\n"
"---"

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid "Eager to learn more? Keep reading!"
msgstr "もっと知りたいですか？こちらをご覧ください！"

msgid "## Build your first Elixir project"
msgstr "## 最初のElixirプジェクトを作ってみよう"

msgid ""
"In order to get your first project started, Elixir ships with a build tool cal"
"led Mix. You can get your new project started by running:"
msgstr ""
"最初のプロジェクトを始めるために、ElixirはMixと呼ばれているビルドツールを提供しています。以下のように実行すれば簡単に新しいプロジェクトを始められま"
"す。"

msgid ""
"```console\n"
"$ mix new path/to/new/project\n"
"```"
msgstr ""

msgid ""
"We have written a guide that covers how to build an Elixir application, with i"
"ts own supervision tree, configuration, tests, and more. The application works"
" as a distributed key-value store where we organize key-value pairs into bucke"
"ts and distribute those buckets across multiple nodes:"
msgstr ""
"以下のガイドに、どうやってElixirのアプリケーションを構築するか、スーパーバイザーツリー、設定、テストなどについて書かれています。このアプリケーションは"
"、キーとバリューのペアをバケツに入れ、複数のノードにわたってバケツを分散させる、分散キーバリューストアとして動作します。"

msgid "* [Mix and OTP](/getting-started/mix-otp/introduction-to-mix.html)"
msgstr "* [Mix と OTP](/getting-started/mix-otp/introduction-to-mix.html)"

msgid ""
"If you are planning to write your first library for other developers to use, d"
"on't forget to read our [Library Guidelines](https://hexdocs.pm/elixir/library"
"-guidelines.html)."
msgstr ""
"もし他の開発者が使うためのライブラリを書こうとしているなら、[ライブラリガイドライン](https://hexdocs.pm/elixir/library-"
"guidelines.html) を読むことをお忘れなく。"

msgid "## Meta-programming"
msgstr "## メタプログラミング"

msgid ""
"Elixir is an extensible and very customizable programming language thanks to i"
"ts meta-programming support. Most meta-programming in Elixir is done through m"
"acros, which are very useful in several situations, especially for writing DSL"
"s. We have written a short guide that explains the basic mechanisms behind mac"
"ros, shows how to write macros, and how to use macros to create DSLs:"
msgstr ""
"Elixirは、Elixir自身のメタプログラミングのサポートにより、拡張性のあるとてもカスタマイズしやすいプログラミング言語です。Elixir内の多くのメ"
"タプログラミングは、マクロを通して行われます。マクロはいくつかの状況においてとても便利で、特にDSLを記述する際に便利です。マクロの背後にある基本的なメカニ"
"ズムについて記述した短いガイドを書きました。どのようにマクロを書くか、DSLを作るためにどうやってマクロを使うかについては以下を参照してください。"

msgid "* [Meta-programming in Elixir](/getting-started/meta/quote-and-unquote.html)"
msgstr "* [Elixirのメタプログラミング](/getting-started/meta/quote-and-unquote.html)"

msgid "## Community and other resources"
msgstr "## コミュニティとその他のリソース"

msgid ""
"We have a [Learning](/learning.html) section that suggests books, screencasts,"
" and other resources for learning Elixir and exploring the ecosystem. There ar"
"e also plenty of Elixir resources out there, like conference talks, open sourc"
"e projects, and other learning material produced by the community."
msgstr ""
"[Learning](/learning.html) セクションでは、Elixirを学びエコシステムを探すための、本、スクリーンキャストやその他のリソースを"
"掲載しています。これら以外にもカンファレンスでのトークやオープンソースプロジェクト、コミュニティによって作られた学習資料など、Elixirを学ぶためのたくさ"
"んのリソースがあります。"

msgid ""
"Don't forget that you can also check the [source code of Elixir itself](https:"
"//github.com/elixir-lang/elixir), which is mostly written in Elixir (mainly th"
"e `lib` directory), or [explore Elixir's documentation](/docs.html)."
msgstr ""
"また、[Elixir自体のソースコード](https://github.com/elixir-lang/elixir) を確認できることを忘れないでください"
"。ソースコードの多くは主に `lib` ディレクトリ内でElixirによって記述されています。さらに[Elixirのドキュメント](/docs.html)も"
"閲覧できます。"

msgid "## A byte of Erlang"
msgstr "## Erlangについて少しだけ"

msgid ""
"Elixir runs on the Erlang Virtual Machine and, sooner or later, an Elixir deve"
"loper will want to interface with existing Erlang libraries. Here's a list of "
"online resources that cover Erlang's fundamentals and its more advanced featur"
"es:"
msgstr ""
"ElixirはErlang仮想マシン上で動作し、遅かれ早かれ、Elixirの開発者は既存のErlangライブラリとのインターフェースが欲しくなるでしょう。こ"
"こではErlangの基礎をカバーするオンラインの資料と、一歩先ゆく特徴をリストアップします。"

msgid ""
"* This [Erlang Syntax: A Crash Course](/crash-course.html) provides a concise "
"intro to Erlang's syntax. Each code snippet is accompanied by equivalent code "
"in Elixir. This is an opportunity for you to not only get some exposure to Erl"
"ang's syntax but also review some of the things you have learned in this guide"
"."
msgstr ""
"* [Erlangの構文: 速習講座](/crash-course.html)  ではErlangの構文についての簡潔な入門を用意しています。どのコードスニ"
"ペットもElixirで等しいコードと対に書かれています。これはErlangの構文を知るだけではなく、今まで学んだことを見直すよい機会になるでしょう。"

msgid ""
"* Erlang's official website has a short [tutorial](http://www.erlang.org/cours"
"e/concurrent_programming.html) with pictures that briefly describe Erlang's pr"
"imitives for concurrent programming."
msgstr ""
"* Erlangの公式ウェブサイトには画像つきの短い [チュートリアル](http://www.erlang.org/course/concurrent_p"
"rogramming.html) があり、Erlangにおいての並行プログラミングでの基本が簡潔に記述されています。"

msgid ""
"* [Learn You Some Erlang for Great Good!](http://learnyousomeerlang.com/) is a"
"n excellent introduction to Erlang, its design principles, standard library, b"
"est practices, and much more. Once you have read through the crash course ment"
"ioned above, you'll be able to safely skip the first couple of chapters in the"
" book that mostly deal with the syntax. When you reach [The Hitchhiker's Guide"
" to Concurrency](http://learnyousomeerlang.com/the-hitchhikers-guide-to-concur"
"rency) chapter, that's where the real fun starts."
msgstr ""
"* [Learn You Some Erlang for Great Good!](http://learnyousomeerlang.com/) はErl"
"angの設計思想、標準ライブラリ、ベストプラクティスなどを知ることができる素晴しい入門です。上で紹介した「Erlangの構文: 速習講座」を読んだなら、主に"
"構文について書かれているこの本の最初のいくつかの章は飛ばしてかまいません。あなたが心底楽しめるような内容は [The Hitchhiker's Guide "
"to Concurrency](http://learnyousomeerlang.com/the-hitchhikers-guide-to-concurr"
"ency) の章から始まります。"
