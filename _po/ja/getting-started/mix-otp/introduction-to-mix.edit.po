# Japanese translations for PACKAGE package.
# Copyright (C) 2017 THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-10-30 15:10+0900\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:1
msgid ""
"---\n"
"layout: getting-started\n"
"title: Introduction to Mix\n"
"---"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:6
msgid "# {{ page.title }}"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:8
msgid "{% include toc.html %}"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:10
msgid "In this guide, we will learn how to build a complete Elixir application, with its own supervision tree, configuration, tests and more."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:12
msgid "The application works as a distributed key-value store. We are going to organize key-value pairs into buckets and distribute those buckets across multiple nodes. We will also build a simple client that allows us to connect to any of those nodes and send requests such as:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:14
msgid ""
"```\n"
"CREATE shopping\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:18
msgid ""
"PUT shopping milk 1\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:21
msgid ""
"PUT shopping eggs 3\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:24
msgid ""
"GET shopping milk\n"
"1\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:28
msgid ""
"DELETE shopping eggs\n"
"OK\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:32
msgid "In order to build our key-value application, we are going to use three main tools:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:34
msgid "* ***OTP*** _(Open Telecom Platform)_ is a set of libraries that ships with Erlang. Erlang developers use OTP to build robust, fault-tolerant applications. In this chapter we will explore how many aspects from OTP integrate with Elixir, including supervision trees, event managers and more;"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:36
msgid "* ***Mix*** is a build tool that ships with Elixir that provides tasks for creating, compiling, testing your application, managing its dependencies and much more;"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:38
msgid "* ***ExUnit*** is a test-unit based framework that ships with Elixir;"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:40
msgid "In this chapter, we will create our first project using Mix and explore different features in  <abbr title=\"Open Telecom Platform\">OTP</abbr>, Mix and ExUnit as we go."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:42
msgid ""
"> This guide requires Elixir v1.5.0 or later. You can check your Elixir version with `elixir --version` and install a more recent version if required by following the steps described in [the first chapter of the Getting Started guide](/install.html).\n"
">\n"
"> If you have any questions or improvements to the guide, please reach discussion channels such as the [Elixir Forum](https://elixirforum.com) or the [issues tracker](https://github.com/elixir-lang/elixir-lang.github.com/issues). Your input is really important to help us guarantee the guides are accessible and up to date!\n"
">\n"
"> The final code for this guide is in [this repository](https://github.com/josevalim/kv_umbrella) and can be used as a reference."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:48
msgid ""
"> The Elixir guides are also available in EPUB format:\n"
">\n"
">   * [Getting started guide](https://repo.hex.pm/guides/elixir/elixir-getting-started-guide.epub)\n"
">   * [Mix and OTP guide](https://repo.hex.pm/guides/elixir/mix-and-otp.epub)\n"
">   * [Meta-programming guide](https://repo.hex.pm/guides/elixir/meta-programming-in-elixir.epub)"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:54
msgid "## Our first project"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:56
msgid "When you install Elixir, besides getting the `elixir`, `elixirc` and `iex` executables, you also get an executable Elixir script named `mix`."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:58
msgid "Let's create our first project by invoking `mix new` from the command line. We'll pass the project name as argument (`kv`, in this case), and tell Mix that our main module should be the all-uppercase `KV`, instead of the default, which would have been `Kv`:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:60
msgid ""
"```bash\n"
"$ mix new kv --module KV\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:64
msgid "Mix will create a directory named `kv` with a few files in it:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:66
msgid ""
"    * creating README.md\n"
"    * creating .gitignore\n"
"    * creating mix.exs\n"
"    * creating config\n"
"    * creating config/config.exs\n"
"    * creating lib\n"
"    * creating lib/kv.ex\n"
"    * creating test\n"
"    * creating test/test_helper.exs\n"
"    * creating test/kv_test.exs"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:77
msgid "Let's take a brief look at those generated files."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:79
msgid "> Note: Mix is an Elixir executable. This means that in order to run `mix`, you need to have both `mix` and `elixir` executables in your PATH. That's what happens when you install Elixir."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:81
msgid "## Project compilation"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:83
msgid "A file named `mix.exs` was generated inside our new project folder (`kv`) and its main responsibility is to configure our project. Let's take a look at it:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:85
msgid ""
"```elixir\n"
"defmodule KV.Mixfile do\n"
"  use Mix.Project"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:89
msgid ""
"  def project do\n"
"    [\n"
"      app: :kv,\n"
"      version: \"0.1.0\",\n"
"      elixir: \"~> 1.6-dev\",\n"
"      start_permanent: Mix.env == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:99
msgid ""
"  # Run \"mix help compile.app\" to learn about applications.\n"
"  def application do\n"
"    [\n"
"      extra_applications: [:logger]\n"
"    ]\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:106
msgid ""
"  # Run \"mix help deps\" to learn about dependencies.\n"
"  defp deps do\n"
"    [\n"
"      # {:dep_from_hexpm, \"~> 0.3.0\"},\n"
"      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag: \"0.1.0\"},\n"
"    ]\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:116
msgid "Our `mix.exs` defines two public functions: `project`, which returns project configuration like the project name and version, and `application`, which is used to generate an application file."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:118
msgid "There is also a private function named `deps`, which is invoked from the `project` function, that defines our project dependencies. Defining `deps` as a separate function is not required, but it helps keep the project configuration tidy."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:120
msgid "Mix also generates a file at `lib/kv.ex` with a module containing exactly one function, called `hello`:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:122
msgid ""
"```elixir\n"
"defmodule KV do\n"
"  @moduledoc \"\"\"\n"
"  Documentation for KV.\n"
"  \"\"\""
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:128
msgid ""
"  @doc \"\"\"\n"
"  Hello world."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:131
msgid "  ## Examples"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:133
msgid ""
"      iex> KV.hello\n"
"      :world"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:136
msgid ""
"  \"\"\"\n"
"  def hello do\n"
"    :world\n"
"  end\n"
"end"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:142
msgid "```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:144
msgid "This structure is enough to compile our project:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:146
msgid ""
"```bash\n"
"$ cd kv\n"
"$ mix compile\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:151
msgid "Will output:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:153
msgid ""
"    Compiling 1 file (.ex)\n"
"    Generated kv app"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:156
msgid "The `lib/kv.ex` file was compiled, an application manifest named `kv.app` was generated and [all protocols were consolidated as described in the Getting Started guide](/getting-started/protocols.html#protocol-consolidation). All compilation artifacts are placed inside the `_build` directory using the options defined in the `mix.exs` file."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:158
msgid "Once the project is compiled, you can start an `iex` session inside the project by running:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:160
msgid ""
"```bash\n"
"$ iex -S mix\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:164
msgid "## Running tests"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:166
msgid "Mix also generated the appropriate structure for running our project tests. Mix projects usually follow the convention of having a `<filename>_test.exs` file in the `test` directory for each file in the `lib` directory. For this reason, we can already find a `test/kv_test.exs` corresponding to our `lib/kv.ex` file. It doesn't do much at this point:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:168
msgid ""
"```elixir\n"
"defmodule KVTest do\n"
"  use ExUnit.Case\n"
"  doctest KV"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:173
msgid ""
"  test \"greets the world\" do\n"
"    assert KV.hello() == :world\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:179
msgid "It is important to note a couple things:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:181
msgid "1. the test file is an Elixir script file (`.exs`). This is convenient because we don't need to compile test files before running them;"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:183
msgid "2. we define a test module named `KVTest`, use [`ExUnit.Case`](https://hexdocs.pm/ex_unit/ExUnit.Case.html) to inject the testing API and define a simple test using the `test/2` macro;"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:185
msgid "Mix also generated a file named `test/test_helper.exs` which is responsible for setting up the test framework:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:187
msgid ""
"```elixir\n"
"ExUnit.start()\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:191
msgid "This file will be required by Mix every time before we run our tests. We can run tests with `mix test`:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:193
msgid ""
"    Compiled lib/kv.ex\n"
"    Generated kv app\n"
"    .."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:197
msgid ""
"    Finished in 0.04 seconds\n"
"    2 tests, 0 failures"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:200
msgid "    Randomized with seed 540224"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:202
msgid "Notice that by running `mix test`, Mix has compiled the source files and generated the application manifest once again. This happens because Mix supports multiple environments, which we will explore in the next section."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:204
msgid "Furthermore, you can see that ExUnit prints a dot for each successful test and automatically randomizes tests too. Let's make the test fail on purpose and see what happens."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:206
msgid "Change the assertion in `test/kv_test.exs` to the following:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:208
msgid ""
"```elixir\n"
"assert KV.hello() == :oops\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:212
msgid "Now run `mix test` again (notice this time there will be no compilation):"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:214
msgid ""
"```\n"
"  1) test greets the world (KVTest)\n"
"     test/kv_test.exs:5\n"
"     Assertion with == failed\n"
"     code:  assert KV.hello() == :oops\n"
"     left:  :world\n"
"     right: :oops\n"
"     stacktrace:\n"
"       test/kv_test.exs:6: (test)"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:224
msgid "."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:226
msgid ""
"Finished in 0.05 seconds\n"
"2 tests, 1 failure\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:230
msgid "For each failure, ExUnit prints a detailed report, containing the test name with the test case, the code that failed and the values for the left side and right side (rhs) of the `==` operator."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:232
msgid "In the second line of the failure, right below the test name, there is the location where the test was defined. If you copy the test location in full, including the file and line number, and append it to `mix test`, Mix will load and run just that particular test:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:234
msgid ""
"```bash\n"
"$ mix test test/kv_test.exs:5\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:238
msgid "This shortcut will be extremely useful as we build our project, allowing us to quickly iterate by running a single test."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:240
msgid "Finally, the stacktrace relates to the failure itself, giving information about the test and often the place the failure was generated from within the source files."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:242
msgid "## Environments"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:244
msgid "Mix supports the concept of \"environments\". They allow a developer to customize compilation and other options for specific scenarios. By default, Mix understands three environments:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:246
msgid ""
"* `:dev` - the one in which Mix tasks (like `compile`) run by default\n"
"* `:test` - used by `mix test`\n"
"* `:prod` - the one you will use to run your project in production"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:250
msgid "The environment applies only to the current project. As we will see later on, any dependency you add to your project will by default run in the `:prod` environment."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:252
msgid "Customization per environment can be done by accessing [the `Mix.env` function](https://hexdocs.pm/mix/Mix.html#env/1) in your `mix.exs` file, which returns the current environment as an atom. That's what we have used in the `:start_permanent` options:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:254
msgid ""
"```elixir\n"
"def project do\n"
"  [...,\n"
"   start_permanent: Mix.env == :prod,\n"
"   ...]\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:262
msgid "When true, the `:start_permanent` option starts your application in permanent mode, which means the Erlang VM will crash if your application's supervision tree shuts down. Notice we don't want this behaviour in dev and test because it is useful to keep the VM instance running in those environments for troubleshooting purposes."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:264
msgid "Mix will default to the `:dev` environment, except for the `test` task that will default to the `:test` environment. The environment can be changed via the `MIX_ENV` environment variable:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:266
msgid ""
"```bash\n"
"$ MIX_ENV=prod mix compile\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:270
msgid "Or on Windows:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:272
msgid ""
"```batch\n"
"> set \"MIX_ENV=prod\" && mix compile\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:276
msgid "> Mix is a build tool and, as such, it is not always expected to be available in production, especially if your team uses explicit build steps. Therefore, it is recommended to access `Mix.env` only in configuration files and inside `mix.exs`, never in your application code (`lib`)."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:278
msgid "## Exploring"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:280
msgid "There is much more to Mix, and we will continue to explore it as we build our project. A [general overview is available on the Mix documentation](https://hexdocs.pm/mix/)."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:282
msgid "Keep in mind that you can always invoke the help task to list all available tasks:"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:284
msgid ""
"```bash\n"
"$ mix help\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:288
msgid "You can get further information about a particular task by invoking `mix help TASK`."
msgstr ""

#: ../../../../getting-started/mix-otp/introduction-to-mix.markdown:290
msgid "Let's write some code!"
msgstr ""
