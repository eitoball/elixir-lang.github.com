msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-10-05 01:50+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Basic types\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"In this chapter we will learn more about Elixir basic types: integers, floats,"
" booleans, atoms, strings, lists and tuples. Some basic types are:"
msgstr ""
"この章では、Integers、Floats、Booleans、Atoms、Strings、Lists、Tuples など Elixir の基本的なデータ型に"
"ついて学んでいきます。"

msgid ""
"```iex\n"
"iex> 1          # integer\n"
"iex> 0x1F       # integer\n"
"iex> 1.0        # float\n"
"iex> true       # boolean\n"
"iex> :atom      # atom / symbol\n"
"iex> \"elixir\"   # string\n"
"iex> [1, 2, 3]  # list\n"
"iex> {1, 2, 3}  # tuple\n"
"```"
msgstr ""

msgid "## Basic arithmetic"
msgstr "## 四則演算"

msgid "Open up `iex` and type the following expressions:"
msgstr "`iex` を起動して以下の演算を試してください。"

msgid ""
"```iex\n"
"iex> 1 + 2\n"
"3\n"
"iex> 5 * 5\n"
"25\n"
"iex> 10 / 2\n"
"5.0\n"
"```"
msgstr ""

msgid ""
"Notice that `10 / 2` returned a float `5.0` instead of an integer `5`. This is"
" expected. In Elixir, the operator `/` always returns a float. If you want to "
"do integer division or get the division remainder, you can invoke the `div` an"
"d `rem` functions:"
msgstr ""
"`10 / 2` の結果が Integer の `5` ではなく `5.0` という Float として得られたはずです。Elixir において `/` は"
"常に Float を返します。除算や剰余で整数を得たい場合には、`div` や `rem` 関数を使用できます。"

msgid ""
"```iex\n"
"iex> div(10, 2)\n"
"5\n"
"iex> div 10, 2\n"
"5\n"
"iex> rem 10, 3\n"
"1\n"
"```"
msgstr ""

msgid ""
"Notice that Elixir allows you to drop the parentheses when invoking named func"
"tions. This feature gives a cleaner syntax when writing declarations and contr"
"ol-flow constructs."
msgstr "Elixr は関数を呼び出す際の括弧を省略できます。これにより、宣言と制御構造での文法的な見晴らしをクリアにします。"

msgid ""
"Elixir also supports shortcut notations for entering binary, octal, and hexade"
"cimal numbers:"
msgstr "2 進法、8 進法、および 16 進法もサポートしています。"

msgid ""
"```iex\n"
"iex> 0b1010\n"
"10\n"
"iex> 0o777\n"
"511\n"
"iex> 0x1F\n"
"31\n"
"```"
msgstr ""

msgid ""
"Float numbers require a dot followed by at least one digit and also support `e"
"` for scientific notation:"
msgstr "浮動小数点数は仮数と小数点に続いて小数を必要とし、指数表記の `e` も使用できます。"

msgid ""
"```iex\n"
"iex> 1.0\n"
"1.0\n"
"iex> 1.0e-10\n"
"1.0e-10\n"
"```"
msgstr ""

msgid "Floats in Elixir are 64-bit double precision."
msgstr "Elixir の Floats は倍精度浮動小数点数です。"

msgid ""
"You can invoke the `round` function to get the closest integer to a given floa"
"t, or the `trunc` function to get the integer part of a float."
msgstr "`round` や `trunc` 関数では、引数として与えられた Float をもとに最も近い仮数を得られます。"

msgid ""
"```iex\n"
"iex> round(3.58)\n"
"4\n"
"iex> trunc(3.58)\n"
"3\n"
"```"
msgstr ""

msgid "## Identifying functions"
msgstr "## 関数の確認"

msgid ""
"Functions in Elixir are identified by both their name and their arity. The ari"
"ty of a function describes the number of arguments that the function takes. Fr"
"om this point on we will use both the function name and its arity to describe "
"functions throughout the documentation. `round/1` identifies the function whic"
"h is named `round` and takes 1 argument, whereas `round/2` identifies a differ"
"ent (nonexistent) function with the same name but with an arity of `2`."
msgstr ""
"Elixir における関数は、その関数名とアリティで成り立ちます。アリティはその関数が受け取る引数の数を示します。これ以降は関数を説明するにあたって、関数名"
"とそのアリティの両方を添えて記述していきます。`round/1` は `round` という関数とその関数が受け取る引数の数 `1` を示します。一方で、例"
"えば `round/2` という関数があった場合に、それは関数名として同名ではあるものの、前者とは異なって引数を `2` 受け取る別の関数です。"

msgid "## Booleans"
msgstr "## 真偽値"

msgid "Elixir supports `true` and `false` as booleans:"
msgstr "Elixir では `true` と `false` を 真偽値 としています。"

msgid ""
"```iex\n"
"iex> true\n"
"true\n"
"iex> true == false\n"
"false\n"
"```"
msgstr ""

msgid ""
"Elixir provides a bunch of predicate functions to check for a value type. For "
"example, the `is_boolean/1` function can be used to check if a value is a bool"
"ean or not:"
msgstr ""
"述語的な名前を持った一連の関数 (Predicate functions) を使って、値の型をチェックすることも出来ます。例えば `is_boolean/1"
"` 関数は、値が真偽値か否かをチェックする為に使用します。"

msgid ""
"```iex\n"
"iex> is_boolean(true)\n"
"true\n"
"iex> is_boolean(1)\n"
"false\n"
"```"
msgstr ""

msgid ""
"You can also use `is_integer/1`, `is_float/1` or `is_number/1` to check, respe"
"ctively, if an argument is an integer, a float, or either."
msgstr ""
"さらに、`is_integer/1` や `is_float/1` 、`is_number/1` なども同様に、それぞれの引数が整数・浮動小数点数・数値であ"
"るかをチェックできます。"

msgid ""
"> Note: At any moment you can type `h()` in the shell to print information on "
"how to use the shell. The `h` helper can also be used to access documentation "
"for any function. For example, typing `h is_integer/1` is going to print the d"
"ocumentation for the `is_integer/1` function. It also works with operators and"
" other constructs (try `h ==/2`)."
msgstr "> Note: `h()` でシェルの使い方に関する情報を表示できます。`h` ヘルパーは関数に関するドキュメントを参照する際にも使用できます。"

msgid "## Atoms"
msgstr "## アトム"

msgid ""
"An atom is a constant whose name is its own value. Some other languages call t"
"hese symbols:"
msgstr "アトムは他のいくつかの言語で言うところのシンボルに相当し、それ自身が定数でもあります。"

msgid ""
"```iex\n"
"iex> :hello\n"
":hello\n"
"iex> :hello == :world\n"
"false\n"
"```"
msgstr ""

msgid "The booleans `true` and `false` are, in fact, atoms:"
msgstr "実は `true` と `false` もアトムです。"

msgid ""
"```iex\n"
"iex> true == :true\n"
"true\n"
"iex> is_atom(false)\n"
"true\n"
"iex> is_boolean(:false)\n"
"true\n"
"```"
msgstr ""

msgid ""
"Finally, Elixir has a construct called aliases which we will explore later. Al"
"iases start in upper case and are also atoms:"
msgstr "後で触れますが、Elixir はエイリアスと呼ばれる機能を持っています。エイリアスは大文字から始め、それもまた同時にアトムなのです。"

msgid ""
"```iex\n"
"iex> is_atom(Hello)\n"
"true\n"
"```"
msgstr ""

msgid "## Strings"
msgstr "## 文字列"

msgid ""
"Strings in Elixir are delimited by double quotes, and they are encoded in UTF-"
"8:"
msgstr "文字列リテラルはダブルクォーテーションで囲み、UTF-8 でエンコードされます。"

msgid ""
"```iex\n"
"iex> \"hellö\"\n"
"\"hellö\"\n"
"```"
msgstr ""

msgid ""
"> Note: if you are running on Windows, there is a chance your terminal does no"
"t use UTF-8 by default. You can change the encoding of your current session by"
" running `chcp 65001` before entering IEx."
msgstr ""
"> Note: Windows をお使いの方は、デフォルトで UTF-8 を使用できない可能性があります。これを変更するには、 IEx を起動する前に、`c"
"hcp 65001` を実行してください。"

msgid "Elixir also supports string interpolation:"
msgstr "Elixir は文字列内での式展開もサポートしています。"

msgid ""
"```iex\n"
"iex> \"hellö #{:world}\"\n"
"\"hellö world\"\n"
"```"
msgstr ""

msgid ""
"Strings can have line breaks in them. You can introduce them using escape sequ"
"ences:"
msgstr "文字列内では改行することができ、エスケープシーケンスも利用できます。"

msgid ""
"```iex\n"
"iex> \"hello\n"
"...> world\"\n"
"\"hello\n"
"world\"\n"
"iex> \"hello\n"
"world\"\n"
"\"hello\n"
"world\"\n"
"```"
msgstr ""

msgid "You can print a string using the `IO.puts/1` function from the `IO` module:"
msgstr "文字列の出力には `IO` モジュールの `IO.puts/1` 関数を使用します。"

msgid ""
"```iex\n"
"iex> IO.puts \"hello\n"
"world\"\n"
"hello\n"
"world\n"
":ok\n"
"```"
msgstr ""

msgid "Notice that the `IO.puts/1` function returns the atom `:ok` after printing."
msgstr "`IO.puts/1` 関数がアトムの `:ok` を返していることにも留意してください。"

msgid ""
"Strings in Elixir are represented internally by binaries which are sequences o"
"f bytes:"
msgstr "Elixir における文字列は、内部的にバイト列での表現もなされています。"

msgid ""
"```iex\n"
"iex> is_binary(\"hellö\")\n"
"true\n"
"```"
msgstr ""

msgid "We can also get the number of bytes in a string:"
msgstr "文字列のバイト数も得られます。"

msgid ""
"```iex\n"
"iex> byte_size(\"hellö\")\n"
"6\n"
"```"
msgstr ""

msgid ""
"Notice that the number of bytes in that string is 6, even though it has 5 char"
"acters. That's because the character \"ö\" takes 2 bytes to be represented in UT"
"F-8. We can get the actual length of the string, based on the number of charac"
"ters, by using the `String.length/1` function:"
msgstr ""
"上記の文字列は 5 字ですが、バイト数としては 6 が得られました。 \"ö\" を UTF-8 で表す為には 2 バイトを要するからです。`String.le"
"ngth/1` を使用すると、その文字数に基づいた文字列の長さを得ることもできます。"

msgid ""
"```iex\n"
"iex> String.length(\"hellö\")\n"
"5\n"
"```"
msgstr ""

msgid ""
"The [String module](https://hexdocs.pm/elixir/String.html) contains a bunch of"
" functions that operate on strings as defined in the Unicode standard:"
msgstr ""
"[String モジュール](https://hexdocs.pm/elixir/String.html) には、Unicode に基づいて定義された文字列"
"を操作する為の様々な関数が含まれています。"

msgid ""
"```iex\n"
"iex> String.upcase(\"hellö\")\n"
"\"HELLÖ\"\n"
"```"
msgstr ""

msgid "## Anonymous functions"
msgstr "## 無名関数"

msgid ""
"Anonymous functions can be created inline and are delimited by the keywords `f"
"n` and `end`:"
msgstr "無名関数は `fn` と `end` で囲んだ内側で定義されます。"

msgid ""
"```iex\n"
"iex> add = fn a, b -> a + b end\n"
"#Function<12.71889879/2 in :erl_eval.expr/5>\n"
"iex> add.(1, 2)\n"
"3\n"
"iex> is_function(add)\n"
"true\n"
"iex> is_function(add, 2) # check if add is a function that expects exactly 2 a"
"rguments\n"
"true\n"
"iex> is_function(add, 1) # check if add is a function that expects exactly 1 a"
"rgument\n"
"false\n"
"```"
msgstr ""
"```iex\n"
"iex> add = fn a, b -> a + b end\n"
"#Function<12.71889879/2 in :erl_eval.expr/5>\n"
"iex> add.(1, 2)\n"
"3\n"
"iex> is_function(add)\n"
"true\n"
"iex> is_function(add, 2) # add が 2 つの引数を期待する関数であるのかを確かめる\n"
"true\n"
"iex> is_function(add, 1) # add が 1 つの引数を期待する関数であるのかを確かめる\n"
"false\n"
"```"

msgid ""
"Functions are \"first class citizens\" in Elixir meaning they can be passed as a"
"rguments to other functions in the same way as integers and strings. In the ex"
"ample, we have passed the function in the variable `add` to the `is_function/1"
"` function which correctly returned `true`. We can also check the arity of the"
" function by calling `is_function/2`."
msgstr ""
"「Elixir における関数が\"第一級オブジェクト\"である」ということは、関数そのものも Integer や String と同様に他の関数へ引数として渡す"
"ことが出来るという意味です。例として、私達は先ほど変数 `add` にバインドした関数を、引数が関数であれば `true` を返すという `is_funct"
"ion/1` 関数に渡しました。さらには `is_function/2` 関数を使用してアリティを確かめることも出来ました。"

msgid ""
"Note that a dot (`.`) between the variable and parentheses is required to invo"
"ke an anonymous function. The dot ensures there is no ambiguity between callin"
"g an anonymous function named `add` and a named function `add/2`. In this sens"
"e, Elixir makes a clear distinction between anonymous functions and named func"
"tions. We will explore those differences in [Chapter 8](/getting-started/modul"
"es-and-functions.html)."
msgstr ""
"無名関数の実行には変数と括弧の間にドット (`.`) を必要とします。このドットによって、 `add` という無名関数の呼び出しと `add/2` という関"
"数の呼び出しを区別し、曖昧がないことを保証します。そういった意味で Elixir は無名関数と通常の関数とを明確に区別します。それについて詳しくは [第 8"
" 章](/getting-started/modules-and-functions.html) で取り上げます。"

msgid ""
"Anonymous functions are closures and as such they can access variables that ar"
"e in scope when the function is defined. Let's define a new anonymous function"
" that uses the `add` anonymous function we have previously defined:"
msgstr ""
"無名関数はクロージャであり、関数が定義された際のスコープ内にある変数へはそのままアクセスできます。それでは、先ほど定義した `add` を内包する無名関数を"
"新たに定義してみましょう。"

msgid ""
"```iex\n"
"iex> double = fn a -> add.(a, a) end\n"
"#Function<6.71889879/1 in :erl_eval.expr/5>\n"
"iex> double.(2)\n"
"4\n"
"```"
msgstr ""

msgid ""
"Keep in mind a variable assigned inside a function does not affect its surroun"
"ding environment:"
msgstr "関数内部に置かれた変数は、その周囲の環境には影響がないことに注意してください。"

msgid ""
"```iex\n"
"iex> x = 42\n"
"42\n"
"iex> (fn -> x = 0 end).()\n"
"0\n"
"iex> x\n"
"42\n"
"```"
msgstr ""

msgid "## (Linked) Lists"
msgstr ""

msgid ""
"Elixir uses square brackets to specify a list of values. Values can be of any "
"type:"
msgstr ""

msgid ""
"```iex\n"
"iex> [1, 2, true, 3]\n"
"[1, 2, true, 3]\n"
"iex> length [1, 2, 3]\n"
"3\n"
"```"
msgstr ""

msgid ""
"Two lists can be concatenated or subtracted using the `++/2` and `--/2` operat"
"ors respectively:"
msgstr ""

msgid ""
"```iex\n"
"iex> [1, 2, 3] ++ [4, 5, 6]\n"
"[1, 2, 3, 4, 5, 6]\n"
"iex> [1, true, 2, false, 3, true] -- [true, false]\n"
"[1, 2, 3, true]\n"
"```"
msgstr ""

msgid ""
"List operators never modify the existing list. Concatenating to or removing el"
"ements from a list returns a new list. We say that Elixir data structures are "
"*immutable*. One advantage of immutability is that it leads to clearer code. Y"
"ou can freely pass the data around with the guarantee no one will change it - "
"only transform it."
msgstr ""

msgid ""
"Throughout the tutorial, we will talk a lot about the head and tail of a list."
" The head is the first element of a list and the tail is the remainder of the "
"list. They can be retrieved with the functions `hd/1` and `tl/1`. Let's assign"
" a list to a variable and retrieve its head and tail:"
msgstr ""

msgid ""
"```iex\n"
"iex> list = [1, 2, 3]\n"
"iex> hd(list)\n"
"1\n"
"iex> tl(list)\n"
"[2, 3]\n"
"```"
msgstr ""

msgid "Getting the head or the tail of an empty list throws an error:"
msgstr ""

msgid ""
"```iex\n"
"iex> hd []\n"
"** (ArgumentError) argument error\n"
"```"
msgstr ""

msgid ""
"Sometimes you will create a list and it will return a value in single quotes. "
"For example:"
msgstr ""

msgid ""
"```iex\n"
"iex> [11, 12, 13]\n"
"'\\v\\f'\n"
"iex> [104, 101, 108, 108, 111]\n"
"'hello'\n"
"```"
msgstr ""

msgid ""
"When Elixir sees a list of printable ASCII numbers, Elixir will print that as "
"a charlist (literally a list of characters). Charlists are quite common when i"
"nterfacing with existing Erlang code. Whenever you see a value in IEx and you "
"are not quite sure what it is, you can use the `i/1` to retrieve information a"
"bout it:"
msgstr ""

msgid ""
"```iex\n"
"iex> i 'hello'\n"
"Term\n"
"  'hello'\n"
"Data type\n"
"  List\n"
"Description\n"
"  ...\n"
"Raw representation\n"
"  [104, 101, 108, 108, 111]\n"
"Reference modules\n"
"  List\n"
"Implemented protocols\n"
"  ...\n"
"```"
msgstr ""

msgid ""
"Keep in mind single-quoted and double-quoted representations are not equivalen"
"t in Elixir as they are represented by different types:"
msgstr ""

msgid ""
"```iex\n"
"iex> 'hello' == \"hello\"\n"
"false\n"
"```"
msgstr ""

msgid ""
"Single quotes are charlists, double quotes are strings. We will talk more abou"
"t them in the [\"Binaries, strings and charlists\"](/getting-started/binaries-st"
"rings-and-char-lists.html) chapter."
msgstr ""

msgid "## Tuples"
msgstr ""

msgid ""
"Elixir uses curly brackets to define tuples. Like lists, tuples can hold any v"
"alue:"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, \"hello\"}\n"
"{:ok, \"hello\"}\n"
"iex> tuple_size {:ok, \"hello\"}\n"
"2\n"
"```"
msgstr ""

msgid ""
"Tuples store elements contiguously in memory. This means accessing a tuple ele"
"ment by index or getting the tuple size is a fast operation. Indexes start fro"
"m zero:"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {:ok, \"hello\"}\n"
"{:ok, \"hello\"}\n"
"iex> elem(tuple, 1)\n"
"\"hello\"\n"
"iex> tuple_size(tuple)\n"
"2\n"
"```"
msgstr ""

msgid ""
"It is also possible to put an element at a particular index in a tuple with `p"
"ut_elem/3`:"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {:ok, \"hello\"}\n"
"{:ok, \"hello\"}\n"
"iex> put_elem(tuple, 1, \"world\")\n"
"{:ok, \"world\"}\n"
"iex> tuple\n"
"{:ok, \"hello\"}\n"
"```"
msgstr ""

msgid ""
"Notice that `put_elem/3` returned a new tuple. The original tuple stored in th"
"e `tuple` variable was not modified. Like lists, tuples are also immutable. Ev"
"ery operation on a tuple returns a new tuple, it never changes the given one."
msgstr ""

msgid "## Lists or tuples?"
msgstr ""

msgid "What is the difference between lists and tuples?"
msgstr ""

msgid ""
"Lists are stored in memory as linked lists, meaning that each element in a lis"
"t holds its value and points to the following element until the end of the lis"
"t is reached. This means accessing the length of a list is a linear operation:"
" we need to traverse the whole list in order to figure out its size."
msgstr ""

msgid ""
"Similarly, the performance of list concatenation depends on the length of the "
"left-hand list:"
msgstr ""

msgid ""
"```iex\n"
"iex> list = [1, 2, 3]"
msgstr ""

msgid ""
"# This is fast as we only need to traverse `[0]` to prepend to `list`\n"
"iex> [0] ++ list\n"
"[0, 1, 2, 3]"
msgstr ""

msgid ""
"# This is slow as we need to traverse `list` to append 4\n"
"iex> list ++ [4]\n"
"[1, 2, 3, 4]\n"
"```"
msgstr ""

msgid ""
"Tuples, on the other hand, are stored contiguously in memory. This means getti"
"ng the tuple size or accessing an element by index is fast. However, updating "
"or adding elements to tuples is expensive because it requires creating a new t"
"uple in memory:"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {:a, :b, :c, :d}\n"
"iex> put_elem(tuple, 2, :e)\n"
"{:a, :b, :e, :d}\n"
"```"
msgstr ""

msgid ""
"Note that this applies only to the tuple itself, not its contents. For instanc"
"e, when you update a tuple, all entries are shared between the old and the new"
" tuple, except for the entry that has been replaced. In other words, tuples an"
"d lists in Elixir are capable of sharing their contents. This reduces the amou"
"nt of memory allocation the language needs to perform and is only possible tha"
"nks to the immutable semantics of the language."
msgstr ""

msgid ""
"Those performance characteristics dictate the usage of those data structures. "
"One very common use case for tuples is to use them to return extra information"
" from a function. For example, `File.read/1` is a function that can be used to"
" read file contents. It returns a tuple:"
msgstr ""

msgid ""
"```iex\n"
"iex> File.read(\"path/to/existing/file\")\n"
"{:ok, \"... contents ...\"}\n"
"iex> File.read(\"path/to/unknown/file\")\n"
"{:error, :enoent}\n"
"```"
msgstr ""

msgid ""
"If the path given to `File.read/1` exists, it returns a tuple with the atom `:"
"ok` as the first element and the file contents as the second. Otherwise, it re"
"turns a tuple with `:error` and the error description."
msgstr ""

msgid ""
"Most of the time, Elixir is going to guide you to do the right thing. For exam"
"ple, there is an `elem/2` function to access a tuple item but there is no buil"
"t-in equivalent for lists:"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {:ok, \"hello\"}\n"
"{:ok, \"hello\"}\n"
"iex> elem(tuple, 1)\n"
"\"hello\"\n"
"```"
msgstr ""

msgid ""
"When counting the elements in a data structure, Elixir also abides by a simple"
" rule: the function is named `size` if the operation is in constant time (i.e."
" the value is pre-calculated) or `length` if the operation is linear (i.e. cal"
"culating the length gets slower as the input grows). As a mnemonic, both \"leng"
"th\" and \"linear\" start with \"l\"."
msgstr ""

msgid ""
"For example, we have used 4 counting functions so far: `byte_size/1` (for the "
"number of bytes in a string), `tuple_size/1` (for tuple size), `length/1` (for"
" list length) and `String.length/1` (for the number of graphemes in a string)."
" We use `byte_size` to get the number of bytes in a string -- a cheap operatio"
"n. Retrieving the number of Unicode characters, on the other hand, uses `Strin"
"g.length`, and may be expensive as it relies on a traversal of the entire stri"
"ng."
msgstr ""

msgid ""
"Elixir also provides `Port`, `Reference`, and `PID` as data types (usually use"
"d in process communication), and we will take a quick look at them when talkin"
"g about processes. For now, let's take a look at some of the basic operators t"
"hat go with our basic types."
msgstr ""
